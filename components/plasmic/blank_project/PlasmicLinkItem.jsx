// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qz82g6YFD3ByaFAf5Je7H9
// Component: qkHzGyBKg8
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: qz82g6YFD3ByaFAf5Je7H9/projectcss
import * as sty from "./PlasmicLinkItem.module.css"; // plasmic-import: qkHzGyBKg8/css

export const PlasmicLinkItem__VariantProps = new Array();

export const PlasmicLinkItem__ArgProps = new Array();

function PlasmicLinkItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <li
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.li, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.link)}
        component={Link}
        href={"https://www.plasmic.app/"}
        platform={"nextjs"}
      >
        {"Home"}
      </p.PlasmicLink>
    </li>
  );
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLinkItem__ArgProps,
      internalVariantPropNames: PlasmicLinkItem__VariantProps
    });

    return PlasmicLinkItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkItem";
  } else {
    func.displayName = `PlasmicLinkItem.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkItem = Object.assign(
  // Top-level PlasmicLinkItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicLinkItem
    internalVariantProps: PlasmicLinkItem__VariantProps,
    internalArgProps: PlasmicLinkItem__ArgProps
  }
);

export default PlasmicLinkItem;
/* prettier-ignore-end */
